# -*- coding: utf-8 -*-
"""FileSure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lZT9MtXONpxoPDiStFjVAKYa-33P7VoX

# Form ADT-1-29092023_signed.pdf
"""

# Install the necessary libraries
!apt-get install -y poppler-utils
!pip install pytesseract pdf2image
!pip install PyMuPDF
!pip install PyPDF2

import fitz  # PyMuPDF
import re
import json

# Path to the uploaded PDF file
pdf_path = r"/content/Form ADT-1-29092023_signed.pdf"

# Function to extract form fields from the PDF
def extract_form_fields(pdf_path):
    doc = fitz.open(pdf_path)
    form_fields = {}

    # Iterate over each page and extract form fields
    for page_num in range(len(doc)):
        page = doc.load_page(page_num)
        for field in page.widgets():
            field_name = field.field_name
            field_value = field.field_value  # Correct way to access the field's value
            if field_name and field_value:
                form_fields[field_name] = field_value.strip() if field_value else None

    return form_fields

# Extract the form fields
form_fields = extract_form_fields(pdf_path)
print(type(form_fields))
form_fields = str(form_fields)

# Define regex patterns for other fields
patterns = {
    "company_name": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform1\[0\]\.CompanyName_C\[0\]':\s*'([^']+)'",
    "cin": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform1\[0\]\.CIN_C\[0\]':\s*'([^']+)'",
    "registered_office": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform1\[0\]\.CompanyAdd_C\[0\]':\s*'([^']+)'",
    "appointment_date": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform6\[0\]\.DateOfAppSect_D\[0\]':\s*'([^']+)'",
    "auditor_name": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform3\[0\]\.Subform_4aTo4h\[0\]\.NameAuditorFirm_C\[0\]':\s*'([^']+)'",
    "auditor_address": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform3\[0\]\.Subform_4aTo4h\[0\]\.permaddress2a_C\[0\]':\s*'([^']+)'",
    "auditor_frn_or_membership": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform3\[0\]\.Subform_4aTo4h\[0\]\.MemberShNum\[0\]':\s*'([^']+)'",
    "appointment_type": r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform6\[0\]\.WhrAuditorApp\[0\]':\s*'([^']+)'"
}

# Create a dictionary to store the extracted data
extracted_data = {}

# Extract data using regex
for field, pattern in patterns.items():
    match = re.search(pattern, form_fields)
    if match:
        extracted_data[field] = match.group(1)
    else:
        extracted_data[field] = None

# Extract the address separately using a different pattern
address_pattern = r"'data\[0\]\.FormADT1_Dtls\[0\]\.Page1\[0\]\.Subform1\[0\]\.CompanyAdd_C\[0\]':\s*'([^']+)'"
address_match = re.search(address_pattern, form_fields)

# Check if the address is found and process it
if address_match:
    address = address_match.group(1)
    # Remove the '\r' and replace with spaces, also remove unwanted newlines
    clean_address = re.sub(r'\\r|\r|\n', ' ', address).strip()
    extracted_data["registered_office"] = clean_address
    print(f"Clean Address: {clean_address}")
else:
    extracted_data["registered_office"] = None
    print("Address not found")

# Output the extracted data in the desired format
output = {
    "company_name": extracted_data["company_name"],
    "cin": extracted_data["cin"],
    "registered_office": extracted_data["registered_office"],
    "appointment_date": extracted_data["appointment_date"],
    "auditor_name": extracted_data["auditor_name"],
    "auditor_address": extracted_data["auditor_address"],
    "auditor_frn_or_membership": extracted_data["auditor_frn_or_membership"],
    "appointment_type": extracted_data["appointment_type"]
}

# Print the result as a JSON-like structure
# print(json.dumps(output, indent=2))
# Save the output to a JSON file
with open("output.json", "w") as json_file:
    json.dump(output, json_file, indent=2)

# Load the JSON file
with open(r'/content/output.json', 'r') as file:
    output_json = json.load(file)

def dict_to_text(data):
    text = f"""
    {data['company_name']} (CIN: {data['cin']}) has appointed {data['auditor_name']} (FRN: {data['auditor_frn_or_membership']}) \
        as its statutory auditor, effective from {data['appointment_date']}. The registered office is located at {data['registered_office']}\
            , and the auditor's address is {data['auditor_address']}. The appointment type is {data['appointment_type']}.
    """
    return text.strip()

# Convert dictionary to text
text = dict_to_text(output_json)
print(text)

"""# Consent Signed PDF"""

# Importing necessary libraries
import pytesseract
from pdf2image import convert_from_path

# Path to your PDF file
pdf_path = '/content/Consent signed.pdf'

# Convert PDF to images (one image per page)
images = convert_from_path(pdf_path)

# Use OCR to extract text from each image
text1 = ""
for image in images:
    text1 += pytesseract.image_to_string(image)

# Print the extracted text
print(text1)

import re

def extract_insights(text):
    insights = {}

    # Extract firm name and registration number
    firm_name = re.search(r"(Mallya & Mallya)", text)
    frn = re.search(r"FRN: (\d+)", text)
    insights["Firm Name"] = firm_name.group(0) if firm_name else "Not Found"
    insights["FRN"] = frn.group(1) if frn else "Not Found"

    # Extract consent and eligibility declaration
    consent_declared = "consent" in text.lower()
    eligibility_confirmed = "eligible" in text.lower() and "criteria" in text.lower()
    insights["Consent Declared"] = consent_declared
    insights["Eligibility Confirmed"] = eligibility_confirmed

    # Extract signed date and place
    date = re.search(r"Date: (\d{1,2} \w+,\s?\d{4})", text)  # Updated regex for date
    place = re.search(r"Place:\s([A-Za-z\s]+)", text)  # Adjusted for place of signing
    insights["Date of Signing"] = date.group(1) if date else "Not Found"
    insights["Place of Signing"] = place.group(1) if place else "Not Found"

    # Check if there are any legal proceedings
    legal_proceedings = "no proceedings" in text.lower()
    insights["Legal Proceedings Pending"] = not legal_proceedings

    return insights


# Extract insights from the document
insights = extract_insights(text1)

# Print insights
for key, value in insights.items():
    print(f"{key}: {value}")

"""# Acceptence Signed"""

# Path to your PDF file
pdf_path = '/content/Acceptance signed.pdf'

# Convert PDF to images (one image per page)
images = convert_from_path(pdf_path)

# Use OCR to extract text from each image
text2 = ""
for image in images:
    text2 += pytesseract.image_to_string(image)

# Print the extracted text
print(text2)

import re

def extract_insights(text):
    insights = {}

    # Extract firm name and registration number
    firm_name = re.search(r"(Mallya & Mallya)", text)
    frn = re.search(r"FRN: (\d+)", text)
    insights["Firm Name"] = firm_name.group(0) if firm_name else "Not Found"
    insights["FRN"] = frn.group(1) if frn else "Not Found"

    # Extract consent and eligibility declaration (based on keywords like 'appointment' and 'statutory auditors')
    consent_declared = "appointed" in text.lower() and "statutory auditors" in text.lower()
    insights["Consent Declared"] = consent_declared

    # Extract signed date and place
    date = re.search(r"Date: (\d{1,2} \w+ \d{4})", text)  # Date format
    place = re.search(r"Place:\s([A-Za-z\s]+)", text)  # Extract place
    insights["Date of Signing"] = date.group(1) if date else "Not Found"
    insights["Place of Signing"] = place.group(1) if place else "Not Found"

    # Extract partner details
    partner_name = re.search(r"Partner\n?([^Mem]+)", text)  # Extract partner name (after 'Partner')
    partner_mem_no = re.search(r"Mem No\.: (\d+)", text)  # Extract membership number
    insights["Partner Name"] = partner_name.group(1).strip() if partner_name else "Not Found"
    insights["Partner Membership No"] = partner_mem_no.group(1) if partner_mem_no else "Not Found"

    # Check if there are any legal proceedings (if no negative statement found)
    legal_proceedings = "no proceedings" in text.lower()
    insights["Legal Proceedings Pending"] = not legal_proceedings

    return insights


# Extract insights from the document
insights = extract_insights(text2)

# Print insights
for key, value in insights.items():
    print(f"{key}: {value}")

"""# Intimation Letter Signed"""

# Path to your PDF file
pdf_path = '/content/Intimation Letter Signed.pdf'

# Convert PDF to images (one image per page)
images = convert_from_path(pdf_path)

# Use OCR to extract text from each image
text3 = ""
for image in images:
    text3 += pytesseract.image_to_string(image)

# Print the extracted text
print(text3)

import re

def extract_insights(text):
    insights = {}

    # Extract company name
    company_name = re.search(r"(ALUPA FOODS PRIVATE LIMITED)", text)
    insights["Company Name"] = company_name.group(0) if company_name else "Not Found"

    # Extract director name (handling line breaks, spaces, and potential variations)
    director_name = re.search(r"Director[\s\n]*([A-Za-z\s]+)", text)  # Added [\s\n]* to handle newlines
    insights["Director Name"] = director_name.group(1).strip() if director_name else "Not Found"

    # Extract date and place
    date = re.search(r"Date: (\d{1,2} \w+ \d{4})", text)  # Date format (e.g., 26 September 2022)
    place = re.search(r"Place:\s([A-Za-z\s]+)", text)  # Extract place (e.g., Udupi)
    insights["Date of Signing"] = date.group(1) if date else "Not Found"
    insights["Place of Signing"] = place.group(1) if place else "Not Found"

    # Extract consent confirmation (keywords like "appointed" and "statutory auditor")
    consent_declared = "appointed" in text.lower() and "statutory auditors" in text.lower()
    insights["Consent Declared"] = consent_declared

    # Check if there are any legal proceedings or confirmations
    legal_proceedings = "no proceedings" in text.lower()
    insights["Legal Proceedings Pending"] = not legal_proceedings

    return insights

# Extract insights from the document
insights = extract_insights(text3)

# Print insights
for key, value in insights.items():
    print(f"{key}: {value}")

"""# Resolution for appointment of Auditor Signed"""

# Path to your PDF file
pdf_path = '/content/Resolution for appointment of Auditor Signed.pdf'

# Convert PDF to images (one image per page)
images = convert_from_path(pdf_path)

# Use OCR to extract text from each image
text4 = ""
for image in images:
    text4 += pytesseract.image_to_string(image)

# Print the extracted text
print(text4)

import re

def extract_insights(text):
    insights = {}

    # Extract company name
    company_name = re.search(r"(ALUPA FOODS PRIVATE LIMITED)", text)
    insights["Company Name"] = company_name.group(0) if company_name else "Not Found"

    # Extract director name (handles spaces, line breaks)
    director_name = re.search(r"Director\s*([A-Za-z\s]+)", text)  # Added flexibility for spaces and line breaks
    insights["Director Name"] = director_name.group(1).strip() if director_name else "Not Found"

    # Extract date and place
    date = re.search(r"Date: (\d{1,2} \w+ \d{4})", text)  # Date format (e.g., 26 September 2022)
    place = re.search(r"Place:\s([A-Za-z\s]+)", text)  # Extract place (e.g., Udupi)
    insights["Date of Signing"] = date.group(1) if date else "Not Found"
    insights["Place of Signing"] = place.group(1) if place else "Not Found"

    # Extract the resolution text (looking for the word "RESOLVED")
    resolution = re.search(r"RESOLVED THAT(.+?)CERTIFIED TRUE COPY", text, re.DOTALL)  # Extract everything between "RESOLVED THAT" and "CERTIFIED TRUE COPY"
    insights["Resolution"] = resolution.group(1).strip() if resolution else "Not Found"

    # Check if the company has appointed the auditors (searching for 'appointed' in the resolution)
    consent_declared = "appointed" in text.lower() and "statutory auditors" in text.lower()
    insights["Consent Declared"] = consent_declared

    # Check for legal proceedings (search for 'no proceedings')
    legal_proceedings = "no proceedings" in text.lower()
    insights["Legal Proceedings Pending"] = not legal_proceedings

    return insights


# Extract insights from the document
insights = extract_insights(text4)

# Print insights
for key, value in insights.items():
    print(f"{key}: {value}")

"""# AI Summarizer"""

from transformers import BartForConditionalGeneration, BartTokenizer

def summarize_text_bart(text):
    # Load pre-trained BART model and tokenizer
    model_name = "facebook/bart-large-cnn"
    model = BartForConditionalGeneration.from_pretrained(model_name)
    tokenizer = BartTokenizer.from_pretrained(model_name)

    # Tokenize the input text
    inputs = tokenizer(text, return_tensors="pt", max_length=1024, truncation=True)

    # Generate summary
    summary_ids = model.generate(inputs["input_ids"], num_beams=4, max_length=250, early_stopping=True)

    # Decode and return the summary
    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    return summary

# Generate summary using BART model
summary = summarize_text_bart(text1)

# Print the summary
print("Summary:", summary)

texts = [text, text1, text2, text3, text4]
summaries = []

# Generate summaries
for i, text in enumerate(texts, 1):
    summary = summarize_text_bart(text)
    summaries.append(f"Summary {i}:\n{summary}\n")

# Save all summaries to summary.txt
with open("summary.txt", "w", encoding="utf-8") as file:
    file.writelines(summaries)

# Print confirmation
print("All summaries saved to summary.txt")